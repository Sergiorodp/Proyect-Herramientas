{"version":3,"sources":["services/consult.js","services/firebaseKey.js","components/container-cards/container-card.js","services/subirData/updateData.js","components/envioData/data-checkbox/data-checkbox.js","components/envioData/data-send.js","components/data/data.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","getData","StreamSchart","lazy","dataArray","Card","React","memo","params","useState","valor","nombre","vecesprendido","sense","setSense","keyWord","key","useEffect","ref","on","snap","data","val","dataplus","masinfo","shift","push","className","fallback","num","arrayLol","href","GetdataProps","props","GetD","setGetD","Data","console","log","UpdateData","update","state","Input","itsGoing","numberOfGuest","Nbutton","setNbutton","animation","setAnimation","numero","type","defaultValue","name","value","onChange","evt","target","checked","autoComplete","SendData","nComponents","i","mapInput","map","onSubmit","preventDefault","data-toggle","Datarender","pos","link","setValor","Nsensores","setNsensores","snapshot","ndata","nDatos","temp","child","sensorList","sensores","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.857fe52e.chunk.js","sourcesContent":["\r\nimport firebase from 'firebase'\r\nimport {DB_CONFIG} from './firebaseKey'\r\nimport 'firebase/database'\r\n\r\n\r\nconst config = firebase.initializeApp(DB_CONFIG)\r\nconst db = config.database()\r\n\r\nexport function nValFuntion(){\r\n    const baseNum = db.ref('quiz').once(\"value\",(snap) =>{\r\n        const nVal = snap.val()\r\n        return nVal.nDatos\r\n    })\r\n    return {baseNum}\r\n}\r\n\r\nexport default function getData(){\r\n    return db \r\n}\r\n\r\n","// import firebase from 'firebase'\r\n\r\n// var admin = require(\"firebase-admin\");\r\n\r\n// var serviceAccount = require(\"../services/key/key.json\");\r\n\r\n// admin.initializeApp({\r\n//     credential: admin.credential.cert(serviceAccount),\r\n//     databaseURL: \"https://test-java-python.firebaseio.com/\"\r\n// });\r\n\r\n// const db = admin.database();\r\n\r\n// export default function getDataFire(){\r\n//     return(\r\n//         db.ref('quiz').on(\"value\")\r\n//         .then((snapshot)=>{\r\n//             var dataRes = snapshot.value()\r\n//             return dataRes\r\n//         })\r\n//     )\r\n// }\r\n\r\n\r\nexport const DB_CONFIG = {\r\n    apiKey: \"AIzaSyC7Sdn3R-fW5KS-2ucCwzpGnB0HYKElHDM\",\r\n    authDomain: \"test-java-python.firebaseapp.com\",\r\n    databaseURL: \"https://test-java-python.firebaseio.com\",\r\n    projectId: \"test-java-python\",\r\n    storageBucket: \"test-java-python.appspot.com\",\r\n    messagingSenderId: \"167375922955\",\r\n    appId: \"1:167375922955:web:6ba473481c885a4da2e40e\"\r\n} ","import React,{useState, useEffect,lazy,Suspense} from 'react'\r\n// import Datarender from '../data/data';\r\n\r\nimport getData  from '../../services/consult'\r\nconst StreamSchart = lazy(() => import('./chart/chart'))\r\n\r\nvar dataArray = [0,0,0,0,0,0,0,0,0,0]\r\n\r\nconst Card = React.memo( function Card({params}){\r\n\r\n    const [sense,setSense] = useState({\r\n        valor : 0,\r\n        nombre : \"cargando...\",\r\n        vecesprendido : 0,\r\n    })\r\n\r\n    const keyWord = params.key\r\n    // console.log(params);\r\n    \r\n    useEffect(() => {\r\n        getData().ref(`quiz/eladc${keyWord}`).on(\"value\",(snap) => {\r\n            const data = snap.val()\r\n            const dataplus = {\r\n                valor : data.valor,\r\n                vecesprendido : data.vecesprendido,\r\n                nombre : data.nombre,\r\n                masinfo : `ADC numero ${keyWord}`,\r\n            }\r\n            dataArray.shift() \r\n            dataArray.push( data.valor * 10)\r\n            // console.log(data);\r\n            setSense(dataplus);\r\n        })\r\n    }, [keyWord])\r\n\r\n    return(\r\n    <div className = \"card\">\r\n        <div className = \"card-header\">\r\n    <h2 className = \"aqua\"> SENSOR : {sense.nombre}</h2>\r\n            </div>\r\n                <div className = \" card-body\">\r\n                    <p>Valor: {sense.valor}</p>\r\n                    <p>Veces Prendido: {sense.vecesprendido}</p> \r\n                    <p>Mas info: {sense.masinfo}</p>\r\n                    <Suspense fallback = {<p>cargando... </p>}> \r\n                        <StreamSchart num = {sense.valor} arrayLol = {dataArray}/>\r\n                    </Suspense>\r\n                </div>\r\n            <div className = \"card-footer\">\r\n                <a href = '/'>pagina principal</a>\r\n        </div>\r\n    </div>\r\n    )\r\n\r\n})\r\nexport default Card;\r\n","import getData from '../consult'\r\nimport {useState} from 'react'\r\n\r\n\r\nfunction UpdateData(props){\r\n    // console.log(\"Las prosp de get son\");\r\n    console.log(props);\r\n    getData().ref(`Leds/N${props.num}`).update({state : props.state})\r\n}\r\n\r\nfunction GetdataProps(props){\r\n    \r\n    const [GetD, setGetD] = useState(false)\r\n\r\n    getData().ref(`Leds/N${props.num}`).on(\"value\",snap =>{\r\n        const Data = snap.val()\r\n        console.log(Data);\r\n        setGetD(Data)\r\n    })\r\n\r\n    return(GetD)\r\n}\r\n\r\nexport {GetdataProps}\r\nexport default UpdateData","import React,{useState , useEffect} from 'react'\r\nimport UpdateData,{GetdataProps} from '../../../services/subirData/updateData'\r\n\r\nfunction Input(props){\r\n\r\n    const [sense,setSense] = useState({itsGoing : '' , numberOfGuest : 1})\r\n    const [Nbutton,setNbutton] = useState(0)\r\n    const [animation,setAnimation] = useState (\"btn-secondary\")\r\n\r\n    useEffect(() => {\r\n        setNbutton(props.numero)\r\n        setAnimation(\"btn-success\")\r\n    }, [props.numero])\r\n\r\n    const handleInputChange = evt =>{\r\n        const target = evt.target;\r\n        const name = target.checked;\r\n        console.log(name);\r\n        UpdateData({num: Nbutton, state: name})\r\n        setSense({itsGoing : name,numberOfGuest : sense.numberOfGuest + 1 })\r\n        const animation = target.checked ? \"btn-danger\" : \"btn-success\" \r\n        setAnimation(animation)\r\n    }\r\n\r\n    return(\r\n        <label className = {`btn ${animation} btn-rounded form-check-label`}>\r\n            <span>ROCIADOR{`${Nbutton}`}</span>\r\n            <input type=\"checkbox\" defaultValue = {GetdataProps()} name=\"isGoing\" className=\"form-check-input input-button\" value={sense.itsGoing} onChange={handleInputChange} autoComplete=\"off\"/>\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default Input","import React from 'react'\r\n// import Datarender from '../data/data';\r\n\r\n// Components\r\nimport Input from './data-checkbox/data-checkbox'\r\n\r\n\r\nfunction SendData(props){\r\n\r\n    let nComponents = []\r\n\r\n    for(let i = 0 ; i < props.num;i++){\r\n        nComponents[i] = i+1;\r\n    }\r\n\r\n    const handelSubmit = evt =>{\r\n        evt.preventDefault()\r\n        console.log(\"ENTRE\");\r\n    }\r\n\r\n    const mapInput = nComponents.map(num =>{\r\n        return (<Input key = {num} numero = {num}/>)\r\n    })\r\n\r\n    return(\r\n        <form onSubmit={handelSubmit} className = \"p-1\">\r\n            <div className=\"btn-group \" data-toggle=\"buttons\">\r\n                {mapInput}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default SendData;","import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\n\r\nimport getData from '../../services/consult'\r\nimport SendData from '../envioData/data-send'\r\n\r\n\r\n// Pagina principal \r\n\r\nfunction Datarender(){\r\n\r\n    const [valor,setValor] = useState([{nombre : \"Cargando...\", valor : 0 , vecesprendido : 0,pos : 0, link:'/'}]);\r\n    const [Nsensores,setNsensores] = useState(0)\r\n\r\n    useEffect(() => {\r\n        getData().ref(`quiz`).on(\"value\",(snapshot) => {\r\n            const data = []\r\n            const ndata = snapshot.val()\r\n            setNsensores(ndata.nDatos)\r\n            for (let i = 0; i < ndata.nDatos; i++){\r\n                const temp = snapshot.child(`eladc${i+1}`).val()\r\n                data[i] = { \r\n                    nombre : temp.nombre,\r\n                    valor : temp.valor,\r\n                    vecesprendido: temp.vecesprendido,\r\n                    masinfo : \"aca esta la info\",\r\n                    pos : (i+1), \r\n                    link : `sensor/${i+1}`\r\n                }\r\n            }\r\n            setValor(data)\r\n        })\r\n    },[])\r\n\r\n    const sensorList = valor.map(sensores => {\r\n        return (\r\n            <div key = {sensores.nombre} className = \"card pb-2 pt-2 mr-auto ml-auto\">\r\n                <div className=\"card-header\">\r\n                    <h3>{sensores.nombre}</h3>\r\n                </div>\r\n                <div className = \"card-body\">\r\n                    <p className=\"aqua\">valor : {sensores.valor}</p>\r\n                    <p># ON : {sensores.vecesprendido}</p>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                    <a href = {sensores.link} className=\"aqua\">más info adc{sensores.pos}</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    let clase;\r\n    clase = \"organize-cards\" \r\n\r\n    return(    \r\n    <div className = \"card\">\r\n        <div className = \"card-header\">\r\n            <h2 className = \"aqua\"> SENSORES</h2>\r\n        </div>\r\n        <div className = {`card-body ${clase}`}>\r\n            {sensorList}\r\n        </div>\r\n        <div className = \"card-footer\">\r\n            <SendData num = {Nsensores}/>\r\n        </div>\r\n    </div>\r\n            \r\n        \r\n    )\r\n} \r\n\r\nexport default Datarender\r\n","import React from 'react';\nimport './App.css';\n\nimport Card from './components/container-cards/container-card'\nimport Datarender from './components/data/data'\n\nimport{ Route } from 'wouter'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section className=\"App-content col-md-10 offset-md-1\">\n        <Route path=\"/sensor/:key\" component = {Card} />\n        <Route path = '/' component = {Datarender}/>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}